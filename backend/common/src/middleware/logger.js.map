{"version":3,"file":"logger.js","sourceRoot":"","sources":["logger.ts"],"names":[],"mappings":";;;;;;AACA,sDAA8B;AAE9B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,iBAAO,CAAC,CAAA;AAElB,QAAA,MAAM,GAAG,iBAAO,CAAC,YAAY,CAAC;IACzC,KAAK,EAAE,MAAM;IACb,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,IAAI,EAAE;IAC7B,WAAW,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;IACxC,UAAU,EAAE;QAEV,IAAI,iBAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;QAGtE,IAAI,iBAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAC;KAC1D;CACF,CAAC,CAAC;AAIH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,cAAM,CAAC,GAAG,CAAC,IAAI,iBAAO,CAAC,UAAU,CAAC,OAAO,CAAC;QACxC,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,MAAM,EAAE;KAChC,CAAC,CAAC,CAAC;CACL;AAEM,MAAM,aAAa,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAE/E,cAAM,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,cAAc,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAEnK,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE;QACzC,cAAM,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;KACnD;IAGD,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QACpB,cAAM,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,aAAa,KAAK,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3G,CAAC,CAAC,CAAC;IAGH,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AAfW,QAAA,aAAa,iBAexB","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport winston from 'winston';\n\nconsole.log('winston', winston)\n\nexport const logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    // 👇️ Write all logs with importance level of `error` or less to `error.log`\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    \n    // 👇️ Write all logs with importance level of `info` or less to `combined.log`\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n\n// 👇️ If we're not in production then log to the `console` with the format:\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple(),\n  }));\n}\n\nexport const requestLogger = (req: Request, res: Response, next: NextFunction) => {\n  // 👇️ Log the request\n  logger.info(`Request: ${req.method} ${req.path}, Headers: ${JSON.stringify(req.headers)}, Body: ${JSON.stringify(req.body)}, Query: ${JSON.stringify(req.query)}`);\n  \n  if (res.locals && res.locals.errorMessage) {\n    logger.error(`Error: ${res.locals.errorMessage}`);\n  }\n\n  // 👇️ Log the response\n  res.on('finish', () => {\n    logger.info(`Response: ${res.statusCode} ${res.statusMessage}; ${res.get('Content-Length') || 0}b sent`);\n  });\n\n  // 👇️ Pass control to the next middleware function\n  next();\n};\n"]}