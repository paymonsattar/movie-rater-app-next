{"version":3,"file":"response.js","sourceRoot":"","sources":["response.ts"],"names":[],"mappings":";;;AAGO,MAAM,UAAU,GAAG,CAAC,IAAkB,EAAE,EAAE;IAC/C,OAAO;QACL,MAAM,EAAE,SAAS;QACjB,IAAI,EAAE,GAAG;QACT,IAAI;KACL,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,UAAU,cAMrB;AAIK,MAAM,eAAe,GAAG,CAAC,IAAkB,EAAE,EAAE;IACpD,OAAO;QACL,MAAM,EAAE,SAAS;QACjB,IAAI,EAAE,GAAG;QACT,IAAI;KACL,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,eAAe,mBAM1B;AAGK,MAAM,iBAAiB,GAAG,GAAG,EAAE;IACpC,OAAO;QACL,MAAM,EAAE,SAAS;QACjB,IAAI,EAAE,GAAG;KACV,CAAC;AACJ,CAAC,CAAC;AALW,QAAA,iBAAiB,qBAK5B;AAGK,MAAM,kBAAkB,GAAG,CAAC,OAAe,EAAE,EAAE;IACpD,OAAO;QACL,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,GAAG;QACT,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,kBAAkB,sBAM7B;AAGK,MAAM,oBAAoB,GAAG,CAAC,OAAe,EAAE,EAAE;IACtD,OAAO;QACL,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,GAAG;QACT,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,oBAAoB,wBAM/B;AAGK,MAAM,iBAAiB,GAAG,CAAC,OAAe,EAAE,EAAE;IACnD,OAAO;QACL,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,GAAG;QACT,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,iBAAiB,qBAM5B;AAGK,MAAM,gBAAgB,GAAG,CAAC,OAAe,EAAE,EAAE;IAClD,OAAO;QACL,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,GAAG;QACT,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,gBAAgB,oBAM3B;AAGK,MAAM,2BAA2B,GAAG,CAAC,OAAe,EAAE,EAAE;IAC7D,OAAO;QACL,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,GAAG;QACT,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,2BAA2B,+BAMtC;AAGK,MAAM,0BAA0B,GAAG,CAAC,OAAe,EAAE,EAAE;IAC5D,OAAO;QACL,MAAM,EAAE,OAAO;QACf,IAAI,EAAE,GAAG;QACT,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,0BAA0B,8BAMrC","sourcesContent":["type ResponseData = Record<string, any> | Array<any> | null;\n\n// 👇️ Used for successful GET requests to return requested data.\nexport const okResponse = (data: ResponseData) => {\n  return {\n    status: 'success',\n    code: 200,\n    data,\n  };\n};\n\n// 👇️ Used for successful POST requests that create a new resource.\n// The newly created resource can be returned in the data field.\nexport const createdResponse = (data: ResponseData) => {\n  return {\n    status: 'success',\n    code: 201,\n    data,\n  };\n};\n\n// 👇️ Used for successful DELETE requests or any other request that has been processed but doesn't return data.\nexport const noContentResponse = () => {\n  return {\n    status: 'success',\n    code: 204,\n  };\n};\n\n// 👇️ Used when the client sends a request with invalid fields.\nexport const badRequestResponse = (message: string) => {\n  return {\n    status: 'error',\n    code: 400,\n    message,\n  };\n};\n\n// 👇️ Used when authentication is required and the request lacks valid credentials.\nexport const unauthorizedResponse = (message: string) => {\n  return {\n    status: 'error',\n    code: 401,\n    message,\n  };\n};\n\n// 👇️ Used when the authenticated user doesn't have permissions to access a resource.\nexport const forbiddenResponse = (message: string) => {\n  return {\n    status: 'error',\n    code: 403,\n    message,\n  };\n};\n\n// 👇️ Used when the requested resource could not be found.\nexport const notFoundResponse = (message: string) => {\n  return {\n    status: 'error',\n    code: 404,\n    message,\n  };\n};\n\n// 👇️ Used for unexpected server errors.\nexport const internalServerErrorResponse = (message: string) => {\n  return {\n    status: 'error',\n    code: 500,\n    message,\n  };\n};\n\n// 👇️ Used for service unavailable errors, often useful for maintenance windows or rate limiting.\nexport const serviceUnavailableResponse = (message: string) => {\n  return {\n    status: 'error',\n    code: 503,\n    message,\n  };\n};\n"]}