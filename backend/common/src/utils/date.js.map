{"version":3,"file":"date.js","sourceRoot":"","sources":["date.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAIrB,MAAM,UAAU,GAAG,CAAC,IAAU,EAAE,SAAiB,YAAY,EAAU,EAAE;IAC9E,OAAO,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB;AAIK,MAAM,SAAS,GAAG,CAAC,UAAkB,EAAE,SAAiB,YAAY,EAAQ,EAAE;IACnF,OAAO,gBAAM,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;AACjD,CAAC,CAAC;AAFW,QAAA,SAAS,aAEpB;AAIK,MAAM,UAAU,GAAG,CAAC,KAAW,EAAE,KAAW,EAAU,EAAE;IAC7D,OAAO,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAA,gBAAM,EAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;AACnD,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB;AAIK,MAAM,OAAO,GAAG,CAAC,IAAU,EAAE,IAAY,EAAQ,EAAE;IACxD,OAAO,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;AACjD,CAAC,CAAC;AAFW,QAAA,OAAO,WAElB;AAIK,MAAM,WAAW,GAAG,CAAC,UAAkB,EAAE,SAAiB,YAAY,EAAW,EAAE;IACxF,OAAO,IAAA,gBAAM,EAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;AACpD,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB;AAIK,MAAM,eAAe,GAAG,CAAC,IAAU,EAAU,EAAE;IACpD,OAAO,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;AAC7B,CAAC,CAAC;AAFW,QAAA,eAAe,mBAE1B","sourcesContent":["import moment from 'moment';\n\n// 👇️ Used to format dates into a standardized string representation.\n// Useful for ensuring date consistency across various parts of the application.\nexport const formatDate = (date: Date, format: string = 'YYYY-MM-DD'): string => {\n  return moment(date).format(format);\n};\n\n// 👇️ Used to parse a date string into a Date object.\n// Useful for converting client-provided date strings into Date objects that can be used in the application.\nexport const parseDate = (dateString: string, format: string = 'YYYY-MM-DD'): Date => {\n  return moment.utc(dateString, format).toDate();\n};\n\n// 👇️ Used to calculate the difference between two dates in days.\n// Useful for features that require age calculations, such as analytics or reporting.\nexport const diffInDays = (date1: Date, date2: Date): number => {\n  return moment(date1).diff(moment(date2), 'days');\n};\n\n// 👇️ Used to add or subtract days from a given date.\n// Useful for features that require date manipulation, such as scheduling or reminders.\nexport const addDays = (date: Date, days: number): Date => {\n  return moment(date).add(days, 'days').toDate();\n};\n\n// 👇️ Used to validate if a given date string is valid according to a specific format.\n// Useful for validating client-provided date strings before further processing.\nexport const isValidDate = (dateString: string, format: string = 'YYYY-MM-DD'): boolean => {\n  return moment(dateString, format, true).isValid();\n};\n\n// 👇️ Used to convert a Date object to a Unix timestamp.\n// Useful for systems that require time-based sorting or filtering.\nexport const toUnixTimestamp = (date: Date): number => {\n  return moment(date).unix();\n};\n"]}