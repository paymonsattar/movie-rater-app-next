{"version":3,"file":"date.test.js","sourceRoot":"","sources":["date.test.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAC5B,2CAOyB;AAEzB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC9C,MAAM,CAAC,IAAA,kBAAU,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,UAAU,GAAG,YAAY,CAAC;QAChC,MAAM,IAAI,GAAG,IAAA,iBAAS,EAAC,UAAU,CAAC,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAA,kBAAU,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC9C,MAAM,OAAO,GAAG,IAAA,eAAO,EAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,CAAC,IAAA,mBAAW,EAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAA,mBAAW,EAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;QACtC,MAAM,CAAC,IAAA,uBAAe,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import moment from 'moment';\nimport {\n  formatDate,\n  parseDate,\n  diffInDays,\n  addDays,\n  isValidDate,\n  toUnixTimestamp\n} from '../../src/index'; // Replace the import path with the actual path to your data.ts file\n\ndescribe('formatDate', () => {\n  it('should correctly format a Date object into a string', () => {\n    const date = new Date('2021-09-03T00:00:00Z');\n    expect(formatDate(date)).toBe('2021-09-03');\n  });\n});\n\ndescribe('parseDate', () => {\n  it('should correctly parse a date string into a Date object', () => {\n    const dateString = '2021-09-03';\n    const date = parseDate(dateString);\n    expect(date.toISOString()).toBe('2021-09-03T00:00:00.000Z');\n  });\n});\n\ndescribe('diffInDays', () => {\n  it('should correctly calculate the difference between two dates', () => {\n    const date1 = new Date('2021-09-03T00:00:00Z');\n    const date2 = new Date('2021-09-01T00:00:00Z');\n    expect(diffInDays(date1, date2)).toBe(2);\n  });\n});\n\ndescribe('addDays', () => {\n  it('should correctly add days to a given date', () => {\n    const date = new Date('2021-09-03T00:00:00Z');\n    const newDate = addDays(date, 2);\n    expect(newDate.toISOString()).toBe('2021-09-05T00:00:00.000Z');\n  });\n});\n\ndescribe('isValidDate', () => {\n  it('should correctly validate a date string', () => {\n    expect(isValidDate('2021-09-03')).toBe(true);\n    expect(isValidDate('invalid-date')).toBe(false);\n  });\n});\n\ndescribe('toUnixTimestamp', () => {\n  it('should correctly convert a Date object to a Unix timestamp', () => {\n    const date = new Date('2021-09-03T00:00:00Z');\n    const timestamp = moment(date).unix();\n    expect(toUnixTimestamp(date)).toBe(timestamp);\n  });\n});\n"]}