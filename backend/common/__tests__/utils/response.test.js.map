{"version":3,"file":"response.test.js","sourceRoot":"","sources":["response.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  okResponse,\n  createdResponse,\n  noContentResponse,\n  badRequestResponse,\n  unauthorizedResponse,\n  forbiddenResponse,\n  notFoundResponse,\n  internalServerErrorResponse,\n  serviceUnavailableResponse,\n} from '../../src/index';\n\ndescribe('API Response Utilities', () => {\n  it('should return 200 OK response with correct data', () => {\n    const response = okResponse({ message: 'OK' });\n    expect(response).toEqual({ status: 'success', code: 200, data: { message: 'OK' } });\n  });\n\n  it('should return 201 Created response with correct data', () => {\n    const response = createdResponse({ id: 1 });\n    expect(response).toEqual({ status: 'success', code: 201, data: { id: 1 } });\n  });\n\n  it('should return 204 No Content response with no data', () => {\n    const response = noContentResponse();\n    expect(response).toEqual({ status: 'success', code: 204 });\n  });\n\n  it('should return 400 Bad Request response with correct message', () => {\n    const response = badRequestResponse('Invalid input');\n    expect(response).toEqual({ status: 'error', code: 400, message: 'Invalid input' });\n  });\n\n  it('should return 401 Unauthorized response with correct message', () => {\n    const response = unauthorizedResponse('Unauthorized');\n    expect(response).toEqual({ status: 'error', code: 401, message: 'Unauthorized' });\n  });\n\n  it('should return 403 Forbidden response with correct message', () => {\n    const response = forbiddenResponse('Forbidden');\n    expect(response).toEqual({ status: 'error', code: 403, message: 'Forbidden' });\n  });\n\n  it('should return 404 Not Found response with correct message', () => {\n    const response = notFoundResponse('Not Found');\n    expect(response).toEqual({ status: 'error', code: 404, message: 'Not Found' });\n  });\n\n  it('should return 500 Internal Server Error response with correct message', () => {\n    const response = internalServerErrorResponse('Internal Server Error');\n    expect(response).toEqual({ status: 'error', code: 500, message: 'Internal Server Error' });\n  });\n\n  it('should return 503 Service Unavailable response with correct message', () => {\n    const response = serviceUnavailableResponse('Service Unavailable');\n    expect(response).toEqual({ status: 'error', code: 503, message: 'Service Unavailable' });\n  });\n});\n"]}