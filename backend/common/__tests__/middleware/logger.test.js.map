{"version":3,"file":"logger.test.js","sourceRoot":"","sources":["logger.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,2CAA0D;AAC1D,iDAAmC;AAEnC,MAAM,aAAa,GAAG,OAAO,CAAC,YAAY,EAAE,CAAA;AAE5C,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC;AACpC,MAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC;AACtC,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC;AAGlC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;IACxB,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAC9C,uCACK,OAAO,KACV,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;YACtC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;SACf,CAAC,IACF;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,WAA6B,CAAC;IAClC,IAAI,YAA+B,CAAC;IACpC,IAAI,YAAY,GAAiB,IAAI,CAAC,EAAE,EAAE,CAAC;IAE3C,UAAU,CAAC,GAAG,EAAE;QACd,WAAW,GAAG;YACZ,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;SACV,CAAC;QACF,YAAY,GAAG;YACb,MAAM,EAAE,EAAE;YACV,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;YACrC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;YACnC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;YACb,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;SACf,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,IAAA,qBAAM,EAAC,WAAsB,EAAE,YAAwB,EAAE,YAAY,CAAC,CAAC;QAEvE,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CAAC,CAAC;QAC1F,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,IAAA,qBAAM,EAAC,WAAsB,EAAE,YAAwB,EAAE,YAAY,CAAC,CAAC;QAGtE,YAAY,CAAC,EAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAElD,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;QAC5E,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,YAAY,GAAG,YAAY,CAAC;QAClC,YAAY,CAAC,MAAO,CAAC,YAAY,GAAG,YAAY,CAAC;QAEjD,IAAA,qBAAM,EAAC,WAAsB,EAAE,YAAwB,EAAE,YAAY,CAAC,CAAC;QAEvE,MAAM,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { requestLogger as logger } from '../../src/index';\nimport * as winston from 'winston';\n\nconst winstonLogger = winston.createLogger()\n\nconst mockInfo = winstonLogger.info;\nconst mockError = winstonLogger.error;\nconst mockAdd = winstonLogger.add;\n\n// Mock winston logger methods\njest.mock(\"winston\", () => {\n  const winston = jest.requireActual(\"winston\");\n  return {\n    ...winston,\n    createLogger: jest.fn().mockReturnValue({\n      info: jest.fn(),\n      error: jest.fn(),\n      add: jest.fn(),  // Mock the 'add' method\n    }),\n  };\n});\n\ndescribe('Logger Middleware', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let nextFunction: NextFunction = jest.fn();\n\n  beforeEach(() => {\n    mockRequest = {\n      method: 'GET',\n      path: '/test-path',\n      headers: {},\n      body: {},\n      query: {},\n    };\n    mockResponse = {\n      locals: {},\n      status: jest.fn().mockReturnValue({}),\n      json: jest.fn().mockReturnValue({}),\n      on: jest.fn(),\n      get: jest.fn(),\n    };\n  });\n\n  it('should correctly log incoming requests', () => {\n    logger(mockRequest as Request, mockResponse as Response, nextFunction);\n\n    expect(mockInfo).toHaveBeenCalledWith(expect.stringContaining('Request: GET /test-path'));\n    expect(nextFunction).toHaveBeenCalled();\n  });\n\n  it('should correctly log outgoing responses', () => {\n    logger(mockRequest as Request, mockResponse as Response, nextFunction);\n\n    // Simulate the 'finish' event\n    (mockResponse.on as jest.Mock).mock.calls[0][1]();\n\n    expect(mockInfo).toHaveBeenCalledWith(expect.stringContaining('Response:'));\n    expect(nextFunction).toHaveBeenCalled();\n  });\n\n  it('should correctly log errors', () => {\n    const errorMessage = 'Some error';\n    mockResponse.locals!.errorMessage = errorMessage;\n\n    logger(mockRequest as Request, mockResponse as Response, nextFunction);\n\n    expect(mockError).toHaveBeenCalledWith(expect.stringContaining(errorMessage));\n    expect(nextFunction).toHaveBeenCalled();\n  });\n});\n"]}